from __future__ import division # to float division

import datetime
import distorm3
from capstone import *
import os, sys
from operator import itemgetter # to sort dictionary
import collections # to comparasion


def distormDisassemble(filename,code, bits):
	# start function variables
	distormOpcodeDict	= dict() # key = opcode, value = count
	distormFilename		= filename+".opcode"
	distormFilename 	= distormFilename.replace("BINARY_FILES","OPCODE_FILES")
	distormOpcodeList	= []

	# Output file for opcodes
	distormFile  = open(distormFilename, 'w')
	sys.stdout.write ("\n'" + filename+"','")
		
	# define distorm arguments
	offset   = 0
	length   = None
	
	if bits == '16bit':
		mode = distorm3.Decode16Bits
	elif bits == '32bit':
		mode = distorm3.Decode32Bits
	else:
		mode = distorm3.Decode64Bits

	# Decoded instruction
	iterable = distorm3.DecodeGenerator(offset, code, mode)
		
	for (offset, size, instruction, hexdump) in iterable:
		# print("%.8x: %-32s %s" % (offset, hexdump, instruction))
		#only opcode instruction
		opcode = instruction.split(" ")[0].lower()	# get opcode
		
		distormOpcodeList.append(opcode)	# add opcode to List
		distormFile.write(opcode+" ")	# write opcode to file
		sys.stdout.write(opcode + " ")

		# count opcode number
		if opcode in distormOpcodeDict:
			distormOpcodeDict[opcode] += 1
		else:
			distormOpcodeDict[opcode]  = 1

	if "VULNERABLE" in filename:
		sys.stdout.write ("', Vulnerable")
	elif "SECURE" in filename:
		sys.stdout.write ("', Secure")
	else:
		sys.stdout.write ("', Unknown")
	
	
	opcodeSum = sum(distormOpcodeDict.values())		
	#print "Distorm - Total Instruction Num : "+str(opcodeSum)
	#GD#outfile = open("totalInstruction.txt", 'a')
	#GD#outfile.write(filename+" "+str(opcodeSum)+"\n")
	
	sortedOpcodeList  = sorted(distormOpcodeDict.items(), key=itemgetter(1),reverse=True) 
	#print sortedOpcodeList
	
	opcodePercentList = []

	for opcode, count in sortedOpcodeList:

		percent = float("{0:.2f}".format((100*count)/opcodeSum))
		opcodePercentList.append(opcode+" "+str(count)+" "+str(percent))
		
	#GD#outfile = open(filename+".opcode2", 'w')
	#GD#outfile.write('\n'.join('%s' % x for x in opcodePercentList))
	
	#GD# print filename+" is disassembled."
	return distormOpcodeList

def capstoneDisassemble(filename,code,bits):	
	# start function variables
	capstoneOpcodeDict	= dict() # key = opcode, value = count
	capstoneFilename	= filename+".capstone"
	capstoneOpcodeList	= []

	# Output file for opcodes
	capstoneFile = open(capstoneFilename, 'w')
	#capstoneFile.write(filename+";")
	if bits == '16bit':
		mode = CS_MODE_16
	elif bits == '32bit':
		mode = CS_MODE_32
	else:
		mode = CS_MODE_64

	#generateOpCodeFromHex(code)
	md = Cs(CS_ARCH_X86, mode)
	for (address, size, mnemonic, op_str) in md.disasm_lite(code, 0x1000):
		
		#opcode = str(mnemonic)
		opcode = str(mnemonic + " " +op_str)
		
		capstoneOpcodeList.append(opcode) 
		#print"%s" %(i.mnemonic) #print"0x%x:\t%s\t\t%s" %(i.address, i.mnemonic, i.op_str)
		capstoneFile.write(opcode + ",") #"," DELIMITER
		
		# count opcode number
		if opcode in capstoneOpcodeDict:
			capstoneOpcodeDict[opcode] += 1
		else:
			capstoneOpcodeDict[opcode]  = 1

	opcodeSum = sum(capstoneOpcodeDict.values())		
	#print "Distorm - Total Instruction Num : "+str(opcodeSum)
	outfile = open("totalInstruction.txt", 'a')
	outfile.write(filename+" "+str(opcodeSum)+"\n")
		
	sortedOpcodeList  = sorted(capstoneOpcodeDict.items(), key=itemgetter(1),reverse=True) 
	#print sortedOpcodeList

	opcodePercentList = []

	for opcode, count in sortedOpcodeList:
		percent = float("{0:.2f}".format((100*count)/opcodeSum))
		opcodePercentList.append(opcode+" "+str(count)+" "+str(percent))

	outfile = open(filename+".capstone2", 'w')
	outfile.write('\n'.join('%s' % x for x in opcodePercentList))
	
	return capstoneOpcodeList
	
	
def Disassemble(filename, bits='32bit',capstone=True, distorm=True,compare=False):
	"""Dissassemble code with distorm3 and capstone.

    @param filename : executable file
    @param bits     : file bits ; 16bit, 32bit or 64bit decoding
	@param capstone : capstone disassebly is used or not
	@param distorm  : capstone disassebly is used or not
	@param compare  : comparasion of distorm and capstone
 
    @returns: tuple of (offset, instruction, hex bytes)
    """

	# start function variables
	(file, ext) = os.path.splitext(filename)

	code = ""
	# Read the code from the file
	try:
		code = open(filename, 'rb').read()
	except Exception as err:
		print str(err)
	
	
	if distorm :
		distormOpcodeList 	=	distormDisassemble(filename,code, bits)
		
	if capstone :
		capstoneOpcodeList	=	capstoneDisassemble(filename,code,bits)
		
	if compare :
		# compare two list
		compare = lambda x, y: collections.Counter(x) == collections.Counter(y)
		print compare(capstoneOpcodeList, distormOpcodeList)
		print set(capstoneOpcodeList) == set (distormOpcodeList)
	

def DisassembleFolder(directory):
	for root, dirs, files in os.walk(directory):
		for file in files:
			Disassemble(os.path.join(root, file),"32bit",False,True,False) #distorm
			#Disassemble(os.path.join(root, file),"32bit",True,True,False) #distorm & capstone

# Running ....		
# Disassembly function test ######################################################################################################
# Disassemble('C:\\Users\\asus\\Desktop\\all_ngvck\\all_viruses_exe\\type1_2_3_4_5_6_9\\ngvck_type1_1000.EXE',"32bit",False,True)#
##################################################################################################################################

# Disassemble bening files and malwares #################################
print "% ################################################################"
print "% Gebze Technical University"
print "% Network and Information Security Laboratory"
print "% Gursoy DURMUS / gdurmus@yahoo.com"
print "% Generation Date: " + datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
print "% ################################################################"
print ""
print "@relation SW_SEC_DATA_STRUCTURE"+"\n"
print "@attribute FILE string"
print "@attribute OPCODE string"
print "@attribute CLASS {Vulnerable,Secure}"+"\n"
print "@data"
DisassembleFolder('D:\\test\\test-data\\BINARY_FILES\\')
#########################################################################
